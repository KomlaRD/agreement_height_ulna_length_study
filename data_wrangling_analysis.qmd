---
title: "Agreement between standing height and height predicted from ulna length"
author: "Eric Anku"
format: html
code-fold: true
---

```{r load-packages}
# Load packages
pacman::p_load(
  tidyverse, # Data manipulation
  googlesheets4, # Import dataset from google sheet
  janitor, # Clean column names
  skimr, # Skim dataset
  gtsummary, # Table summaries
  finalfit, # Column labels
  here, # File management
  rio, # Import and Export dataset
  blandr, # Bland altman analysis
  broom, # Tidy output
  GGally # Scatterplot matrix
)
```


## Import dataset


```{r read-df}
# Import dataset
df <- import(here("data", "height_ulna.csv"))
```


## Clean Dataset


```{r clean-names}
# Clean names
df <- clean_names(df)
```

```{r extract-column-names}
# Extract column names starting with data_
data_cols <- names(df)[grepl("^data_", names(df))]

extracted_part <- substr(data_cols, 6, nchar(data_cols))

# Replace existing column names with new extracted names
names(df)[grepl("^data_", names(df))] <- extracted_part
```


```{r remove-redundant-columns}
# Remove redundant columns 
df <- df%>%
  select(-c(
    meta_instance_id,
    date, # Date of data collection
    consent_form, # Consent form
    predictive_height1, # Sheets calculated prediction using MUST equation
    predictive_height2, # Sheets calculated prediction using MUST equation
    predictive_height3, # Sheets calculated prediction using MUST equation
    predictive_height4, # Sheets calculated prediction using MUST equation
    height_1, # Height measurement one
    height_2, # Height measurement two
    ulna_1, # Ulna length measurement one
    ulna_2 # Ulna length measurement two
  ))
```

```{r remove-wrong-entries}
# Remove wrong entry
df <- df |> 
  filter(occupation != "Dietitian")
```


```{r label-variables}
# Label variables
df <- df |>
  mutate(
    age = ff_label(age, "Age (years"),
    gender = ff_label(gender, "Sex of participant"),
    education = ff_label(education, "Educational status"),
    marital_status = ff_label(marital_status, "Marital status"),
    occupation = ff_label(occupation, "Occupation"),
    ethnicity = ff_label(ethnicity, "Ethnicity"),
    religion = ff_label(religion, "Religion"),
    mean_height = ff_label(mean_height, "Mean height (cm)"),
    mean_ulna = ff_label(mean_ulna, "Mean ulna length (cm)")
  )
```


```{r additional-cleaning}
# Additional cleaning after exploration

## Remove outliers from age and height (Note: Run this twice to remove outliers in height completely)
### List of column names to process for outlier removal
numeric_columns <- c("age", "mean_height", "mean_ulna")

### Create a logical vector indicating rows to keep
rows_to_keep <- rep(TRUE, nrow(df))

for (col_name in numeric_columns) {
  data <- df[[col_name]]
  
  q1 <- quantile(data, 0.25, na.rm = TRUE)
  q3 <- quantile(data, 0.75, na.rm = TRUE)
  iqr <- q3 - q1
  lower_bound <- q1 - 1.5 * iqr
  upper_bound <- q3 + 1.5 * iqr
  
  #### Update the rows_to_keep vector to exclude outliers
  rows_to_keep <- rows_to_keep & (data >= lower_bound & data <= upper_bound)
}

### Filter the dataframe
df <- df[rows_to_keep, ]

## Recode variables in Religion, Ethnicity and Occupation
### Clean religion variable
df$religion[df$religion == "Christianity"] <-  "Christian" # Replace Christianity with Christian
df$religion[df$religion == "Islamic"] <- "Islam" # Replace Islamic with Islam
df$religion[df$religion == "Hindu"] <- "Others" # Replace Hindu with Others
df$religion[df$religion == "None"] <- "Others" # Replace none with others
```



## Exploratory data analysis

```{r glimpse-data}
# Glimpse dataset
df |>
  glimpse()
```

```{r normality-test}
# Function to perform Shapiro-Wilk test and extract p-value
shapiro_test <- function(x) {
  shapiro_result <- shapiro.test(x)
  return(shapiro_result$p.value)
}

# Extract numeric variables from the dataset
numeric_vars <- df %>%
  select_if(is.numeric)

# Apply the Shapiro-Wilk test to each numeric variable and tidy the results
shapiro_p_values <- numeric_vars %>%
  summarise(across(everything(), ~ shapiro_test(.))) %>%
  pivot_longer(everything(), names_to = "Variable", values_to = "P_Value")

# Display the p-values
print(shapiro_p_values)
```


```{r skim-dataset}
skim(df)
```


```{r visualise-height}
# Histogram for height
df |>
  ggplot(aes(mean_height)) +
  geom_histogram()

# Boxplot for height
df |>
  ggplot(aes(y = mean_height)) +
  geom_boxplot() # There are outliers in the height data
```


```{r age-variable}
# Histogram for age
df |>
  ggplot(aes(age)) +
  geom_histogram()

# Boxplot for age
df |>
  ggplot(aes(y = age)) +
  geom_boxplot() # There are outliers in the height data
```

```{r visualise-ulna}
# Histogram for ulna length
df |>
  ggplot(aes(mean_ulna)) +
  geom_histogram()

# Boxplot for ulna length
df |>
  ggplot(aes(y = mean_ulna)) +
  geom_boxplot() # There are outliers in the height data
```


```{r categorical-data}
# Bar chart for gender
df |>
  ggplot(aes(gender)) +
  geom_bar()

# Bar chart for education
df |>
  ggplot(aes(education)) +
  geom_bar()

# Bar chart for marital status
df |>
  ggplot(aes(marital_status)) +
  geom_bar()

# Bar chart for occupation (Cleaning note: Find unique values and recode categories)
df |>
  ggplot(aes(occupation)) +
  geom_bar()

# Bar chart for ethnicity (cleaning note: add Akan:Fante and Fante to Akan)
df |>
  ggplot(aes(ethnicity)) +
  geom_bar()

# Bar chart for religion (Cleaning note: merge christian and christianity, islam and islamic)
df |>
  ggplot(aes(religion)) +
  geom_bar()
```



## Descriptive statistics


```{r mutate-predicted-height}
# Mutate predicted height using Elia equation

predicted_height <- case_when(
      # Predicted height for males
      df$gender == "male" ~ ifelse (df$age < 65, 
                   79.2 + (3.60 * df$mean_ulna),
                   86.3 + (3.15 * df$mean_ulna)),
      # Predicted height for females
      df$gender == "female" ~ ifelse (df$age < 65, 
                     95.6 + (2.77 * df$mean_ulna),
                     80.4 + (3.25 * df$mean_ulna)),
      TRUE ~ NA_real_
    )
```

```{r}
# New predicted height
new_predicted_height <- case_when(
      # Predicted height for males
      df$gender == "male" ~  
                   85.8 + (3.14 * df$mean_ulna),
      # Predicted height for females
      df$gender == "female" ~ 
                     79.55 + (3.14 * df$mean_ulna),
      TRUE ~ NA_real_
    )
```


```{r}
local_predicted_height <- case_when(
      # Predicted height for males
      df$gender == "male" ~  
                   124.23 + (1.52 * df$mean_ulna) - (5.42 * 0),
      # Predicted height for females
      df$gender == "female" ~ 
                     124.23 + (1.52 * df$mean_ulna) - (5.42 * 1),
      TRUE ~ NA_real_
    )
```


```{r test-predicted-height}
# Predicted height on test data
test_predicted_height <- case_when(
      # Predicted height for males
      df_new$gender == "male" ~  
                   124.23 + (1.52 * df_new$ulna_length) - (5.42 * 0),
      # Predicted height for females
      df_new$gender == "female" ~ 
                     124.23 + (1.52 * df_new$ulna_length) - (5.42 * 1),
      TRUE ~ NA_real_
    )
```


```{r add-predicted-height-to-df}
# Add predicted height to dataset
df$predicted_height <- predicted_height
df$new_predicted_height <- new_predicted_height
df$local_predicted_height <- local_predicted_height
df_new$test_predicted_height <- test_predicted_height
```



```{r scatterplot-matrix}
#| message: false
# Scatterplot matrix
numeric_vars |>
  select(age, mean_height, mean_ulna, predicted_height) |>
  ggpairs()
```

```{r label-variables}
# Label variables
df <- df |>
  mutate(
    age = ff_label(age, "Age (years"),
    gender = ff_label(gender, "Sex of participant"),
    education = ff_label(education, "Educational status"),
    marital_status = ff_label(marital_status, "Marital status"),
    occupation = ff_label(occupation, "Occupation"),
    ethnicity = ff_label(ethnicity, "Ethnicity"),
    religion = ff_label(religion, "Religion"),
    height_1 = ff_label(height_1, "Height one (cm)"),
    height_2 = ff_label(height_2, "Height two (cm)"),
    mean_height = ff_label(mean_height, "Mean height (cm)"),
    ulna_1 = ff_label(ulna_1, "Ulna length one (cm)"),
    ulna_2 = ff_label(ulna_2, "Ulna length two (cm)"),
    mean_ulna = ff_label(mean_ulna, "Mean ulna length (cm)"),
    predicted_height = ff_label(predicted_height, "Predicted height (cm)"),
    new_predicted_height = ff_label(new_predicted_height, "New Predicted height (cm)"),
    local_predicted_height = ff_label(local_predicted_height, "Local Predicted height (cm)")
  )
```


```{r summary-statistics}
df |> 
  tbl_summary(
    type = all_dichotomous() ~ "categorical"
  )
```

```{r table-summary-gender}
df |> 
  tbl_summary(
    by = gender,
    type = all_dichotomous() ~ "categorical"
  )
```


```{r bland-altman-analysis}
blandr.statistics ( df$predicted_height, df$mean_height , sig.level=0.95 )
```

```{r}
blandr.statistics ( df$new_predicted_height, df$mean_height , sig.level=0.95 )
```

```{r}
blandr.statistics ( df$local_predicted_height, df$mean_height , sig.level=0.95 )
```

```{r}
blandr.statistics ( df_new$test_predicted_height, df_new$height , sig.level=0.95 )
```


```{r bland-plot}
#| message: false
#| warning: false
blandr.draw( df$predicted_height , df$mean_height )
```

```{r}
#| message: false
#| warning: false
blandr.draw( df_new$test_predicted_height , df_new$height )
```


```{r}
#| message: false
#| warning: false
blandr.draw( df$new_predicted_height , df$mean_height )
```


```{r}
#| message: false
#| warning: false
blandr.draw( df$mean_height , df$local_predicted_height )
```

```{r scatter-plot}
#| message: false
ggplot(df, aes(mean_height, predicted_height)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE)
```

```{r scatter-new}
ggplot(df, aes(mean_height, new_predicted_height)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE)
```


```{r}
ggplot(df, aes(mean_height, local_predicted_height)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE)
```

```{r}
#| message: false
ggplot(df_new, aes(height, test_predicted_height)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE)
```


```{r correlation}
cor.test(df$mean_height, df$predicted_height)
cor.test(df$mean_height, df$new_predicted_height)
cor.test(df$mean_height, df$local_predicted_height)
cor.test(df_new$height, df_new$test_predicted_height)
```


```{r export-dataset}
# Export csv file
export(df, here("data", "height_agreement.csv"))

# Export spss file
export(df, here("data", "height_agreement.sav"))

# Export excel file
export(df, here("data", "height_agreement.xlsx"))

# Export RData
export(df, here("data", "height_data.rdata"))
```



