---
title: "Agreement between standing height and height predicted from ulna length"
author: "Eric Anku"
format: html
code-fold: true
---

```{r load-packages}
# Load packages
pacman::p_load(
  tidyverse, # Data manipulation
  janitor, # Clean column names
  skimr, # Skim dataset
  gtsummary, # Table summaries
  finalfit, # Column labels
  here, # File management
  rio, # Import and Export dataset
  blandr, # Bland altman analysis
  broom, # Tidy output
  GGally, # Scatterplot matrix
  Metrics, # Metrics for model evaluation
  performance # Assessment of regression model performance
)
```


## Import dataset


```{r read-df}
# Import dataset
df1 <- import(here("data", "height_ulna.csv")) # 1st dataset
df2 <- import(here("data", "height_data.csv")) # Second dataset
```

```{r select-relevant-fields}
# Select relevant fields from second half of the data
df2 <- df2 |>
  select(
    age, # Age of participants
    gender, # Sex participants
    education, # Education of participants
    marital_status, # Marital status
    occupation, # Occupational status
    ethnicity,# Ethnicity
    religion, # Religion
    height_one, # Height measurement one
    height_two, # Height measurement two
    ulna_length_one, # Ulna length one
    ulna_length_two # Ulna length two
  )
```

```{r mutate-variables-df2}
df2 <- df2 |>
  mutate(
    mean_height = (height_one + height_two) / 2,
    mean_ulna = (ulna_length_one + ulna_length_two) / 2
  )
```

```{r remove-redundant-columns}
df2 <- df2 |>
  select(-c(
    height_one,
    height_two,
    ulna_length_one,
    ulna_length_two
  ))
```

```{r change_column_name}
# Change occupation to occupational_status
colnames(df2)[which(names(df2) == "occupation")] <- "occupational_status"
```

```{r remove-fields-df1}
# Remove columns from df1 to align variable length with df2
df1 <- df1 |>
  select(-c(
    occupation,
    predicted_height_madden,
    predicted_height_must
  )
  )
```

```{r change-cases}
df1$gender <- str_to_sentence(df1$gender) # Convert df1$gender to sentence case
df1$marital_status <- str_to_sentence(df1$marital_status) # Convert df1$marital_status to sentence case
df1$occupational_status <- str_to_sentence(df1$occupational_status) # Convert educational status to sentence case

# Convert education levels into upper case or sentence case 
df1$education[df1$education == "jhs"] <- "JHS"
df1$education[df1$education == "shs"] <- "SHS"
df1$education[df1$education == "primary"] <- "Primary"
df1$education[df1$education == "higher"] <- "Higher"
df1$education[df1$education == "none"] <- "None"

# Change `Other` to `Others` for ethnicity and religion (df2)
df2$religion[df2$religion == "Other"] <- "Others"
df2$ethnicity[df2$ethnicity == "Other"] <- "Others"
```

```{r remove-outliers-ulna-length}
q1 <- quantile(df$mean_ulna, 0.25, na.rm = TRUE)
q3 <- quantile(df$mean_ulna, 0.75, na.rm = TRUE)
iqr <- q3 - q1
upper_bound <- q3 + 1.5 * iqr

# Remove outliers in height
df <- df[df["mean_ulna"] < upper_bound,]
```


```{r remove-outlier-height}
q1 <- quantile(df$mean_height, 0.25, na.rm = TRUE)
q3 <- quantile(df$mean_height, 0.75, na.rm = TRUE)
iqr <- q3 - q1
lower_bound <- q1 - 1.5 * iqr
upper_bound <- q3 + 1.5 * iqr

# Remove outliers in height
df <- df[df["mean_height"] > lower_bound & df["mean_height"] < upper_bound,]
```

## Exploratory data analysis

```{r glimpse-data}
# Glimpse dataset
df |>
  glimpse()
```

```{r normality-test}
# Function to perform Shapiro-Wilk test and extract p-value
shapiro_test <- function(x) {
  shapiro_result <- shapiro.test(x)
  return(shapiro_result$p.value)
}

# Extract numeric variables from the dataset
numeric_vars <- df %>%
  select_if(is.numeric)

# Apply the Shapiro-Wilk test to each numeric variable and tidy the results
shapiro_p_values <- numeric_vars %>%
  summarise(across(everything(), ~ shapiro_test(.))) %>%
  pivot_longer(everything(), names_to = "Variable", values_to = "P_Value")

# Display the p-values
print(shapiro_p_values)
```


```{r skim-dataset}
skim(df)
```


```{r visualise-height}
# Histogram for height
df |>
  ggplot(aes(mean_height)) +
  geom_histogram()

# Boxplot for height
df |>
  ggplot(aes(y = mean_height)) +
  geom_boxplot() # There are outliers in the height data
```

```{r age-variable}
# Histogram for age
df |>
  ggplot(aes(age)) +
  geom_histogram()

# Boxplot for age
df |>
  ggplot(aes(y = age)) +
  geom_boxplot() # There are outliers in the height data
```

```{r visualise-ulna}
# Histogram for ulna length
df |>
  ggplot(aes(mean_ulna)) +
  geom_histogram()

# Boxplot for ulna length
df |>
  ggplot(aes(y = mean_ulna)) +
  geom_boxplot() # There are outliers in the height data
```

```{r relationship-numeric-variables}
#| message: false
# Scatterplot matrix
numeric_vars |>
  select(age, mean_height, mean_ulna) |>
  ggpairs()
```

```{r}
# Relationship between ulna length and height by gender
df |>
  ggplot(aes(mean_ulna, mean_height, color = gender)) +
  geom_point()

# Relationship between age and height by gender
df |>
  ggplot(aes(age, mean_height, color = gender)) +
  geom_point()
```


```{r categorical-data}
# Bar chart for gender
df |>
  ggplot(aes(gender)) +
  geom_bar()

# Bar chart for education
df |>
  ggplot(aes(education)) +
  geom_bar()

# Bar chart for marital status
df |>
  ggplot(aes(marital_status)) +
  geom_bar()

# Bar chart for occupation (Cleaning note: Find unique values and recode categories)
df |>
  ggplot(aes(occupational_status)) +
  geom_bar()

# Bar chart for ethnicity (cleaning note: add Akan:Fante and Fante to Akan)
df |>
  ggplot(aes(ethnicity)) +
  geom_bar()

# Bar chart for religion (Cleaning note: merge christian and christianity, islam and islamic)
df |>
  ggplot(aes(religion)) +
  geom_bar()
```

```{r remove-occupation}
# Remove occupation 
df <- df |>
  select(-occupation)
```


## Descriptive statistics

### Predictions

```{r mutate-predicted-height-elia}
# Mutate predicted height using Elia equation

predicted_height_must <- case_when(
      # Predicted height for males
      df$gender == "male" ~ ifelse (df$age < 65, 
                   79.2 + (3.60 * df$mean_ulna),
                   86.3 + (3.15 * df$mean_ulna)),
      # Predicted height for females
      df$gender == "female" ~ ifelse (df$age < 65, 
                     95.6 + (2.77 * df$mean_ulna),
                     80.4 + (3.25 * df$mean_ulna)),
      TRUE ~ NA_real_
    )
```

```{r mutate-predicted-height-madden}
# Mutate predicted height using Madden equation
predicted_height_madden <- case_when(
      # Predicted height for males
      df$gender == "male" ~  
                   83.09 + (3.14 * df$mean_ulna),
      # Predicted height for females
      df$gender == "female" ~ 
                     76.84 + (3.14 * df$mean_ulna),
      TRUE ~ NA_real_
    )
```


```{r add-predicted-height-to-df}
# Add predicted height to dataset
df$predicted_height_must <- predicted_height_must
df$predicted_height_madden <- predicted_height_madden
```


```{r label-variables}
# Label variables
df <- df |>
  mutate(
    age = ff_label(age, "Age (years)"),
    gender = ff_label(gender, "Sex of participant"),
    education = ff_label(education, "Educational status"),
    marital_status = ff_label(marital_status, "Marital status"),
    occupational_status = ff_label(occupational_status, "Occupational status"),
    ethnicity = ff_label(ethnicity, "Ethnicity"),
    religion = ff_label(religion, "Religion"),
    mean_height = ff_label(mean_height, "Mean height (cm)"),
    mean_ulna = ff_label(mean_ulna, "Mean ulna length (cm)"),
    predicted_height_must = ff_label(predicted_height_must, "Predicted height Elia (cm)"),
    predicted_height_madden = ff_label(predicted_height_madden, "Predicted height Madden (cm)")
  )
```


### Scatterplot matrix


```{r scatterplot-predicted-height}
#| message: false
# Scatterplot matrix
df |>
  select(mean_height, predicted_height_madden, predicted_height_must) |>
  ggpairs()
```


### Summary statistics



```{r summary-statistics}
df |> 
  tbl_summary(
    type = all_dichotomous() ~ "categorical"
  )
```

```{r table-summary-gender}
df |> 
  tbl_summary(
    by = gender,
    type = all_dichotomous() ~ "categorical"
  ) |> add_p() |>
  bold_p()
```


### Bland-Altman analysis: Elia 


```{r bland-altman-analysis-must}
blandr.statistics (df$mean_height,df$predicted_height_must, sig.level=0.95 )
```


```{r bland-plot}
#| message: false
#| warning: false
blandr.draw(df$mean_height,df$predicted_height_must, plotTitle = "Difference between Predicted height (cm) (MUST) vs Actual height (cm)")
```


### Bland-Altman analysis: Madden


```{r bland-altman-analysis-madden}
blandr.statistics (df$mean_height, df$predicted_height_madden , sig.level=0.95 )
```


```{r plot-madden}
#| message: false
#| warning: false
blandr.draw(df$mean_height,df$predicted_height_madden, plotTitle = "Difference between Predicted height (cm) (Madden) vs Actual height (cm)")
```

```{r metrics-function}
# Function to evaluate model predictions
height_metrics <- function(actual_height, predicted_height){
  # Mean absolute error
  mae_eval <- mae(actual_height, predicted_height)
  
  # Mean squared error
  mse_eval <- mse(actual_height, predicted_height)
  
  # Root mean squared error
  rmse_eval <- rmse(actual_height, predicted_height)
  
  return(c(mae_eval, mse_eval, rmse_eval))
}
```

```{r eval-must-predictions}
height_metrics(df$mean_height, df$predicted_height_must) # mae, mse, rmse
```
```{r eval-madden-predictons}
height_metrics(df$mean_height, df$predicted_height_madden) # mae, mse, rmse
```


```{r data-for-ml, eval=FALSE}
height_ml <- df |>
  select(age, gender, mean_ulna, mean_height)

export(height_ml, here("data", "height_prediction.csv"))
```

```{r linear-models}
model1 <- lm(mean_height ~ mean_ulna, data = height_ml)
model2 <- lm(mean_height ~ mean_ulna + gender, data = height_ml)
model3 <- lm(mean_height ~ mean_ulna + gender + age, data = height_ml)
```

```{r summary-models}
summary(model1)
summary(model2)
summary(model3)
```

```{r}
check_model(model3)
```


```{r export-dataset}
# Export csv file
export(df, here("data", "height_agreement.csv"))

# Export spss file
export(df, here("data", "height_agreement.sav"))

# Export excel file
export(df, here("data", "height_agreement.xlsx"))

# Export RData
export(df, here("data", "height_data.rdata"))
```



