---
title: "Agreement between standing height and height predicted from ulna length"
author: "Eric Anku"
format: html
code-fold: true
---

```{r load-packages}
# Load packages
pacman::p_load(
  tidyverse, # Data manipulation
  janitor, # Clean column names
  skimr, # Skim dataset
  gtsummary, # Table summaries
  finalfit, # Column labels
  here, # File management
  rio, # Import and Export dataset
  blandr, # Bland altman analysis
  broom, # Tidy output
  GGally, # Scatterplot matrix
  Metrics # Metrics for model evaluation
)
```


## Import dataset


```{r read-df}
# Import dataset
df <- import(here("data", "height_ulna.csv"))
```


## Clean Dataset


```{r clean-names}
# Clean names
df <- clean_names(df)
```

```{r extract-column-names}
# Extract column names starting with data_
data_cols <- names(df)[grepl("^data_", names(df))]

extracted_part <- substr(data_cols, 6, nchar(data_cols))

# Replace existing column names with new extracted names
names(df)[grepl("^data_", names(df))] <- extracted_part
```


```{r remove-redundant-columns}
# Remove redundant columns 
df <- df%>%
  select(-c(
    meta_instance_id,
    date, # Date of data collection
    consent_form, # Consent form
    predictive_height1, # Sheets calculated prediction using MUST equation
    predictive_height2, # Sheets calculated prediction using MUST equation
    predictive_height3, # Sheets calculated prediction using MUST equation
    predictive_height4, # Sheets calculated prediction using MUST equation
    height_1, # Height measurement one
    height_2, # Height measurement two
    ulna_1, # Ulna length measurement one
    ulna_2 # Ulna length measurement two
  ))
```

```{r remove-wrong-entries}
# Remove wrong entry
df <- df |> 
  filter(occupation != "Dietitian")
```

```{r remove-outliers-ulna-length}
q1 <- quantile(df$mean_ulna, 0.25, na.rm = TRUE)
q3 <- quantile(df$mean_ulna, 0.75, na.rm = TRUE)
iqr <- q3 - q1
upper_bound <- q3 + 1.5 * iqr

# Remove outliers in height
df <- df[df["mean_ulna"] < upper_bound,]
```


```{r remove-outlier-height}
q1 <- quantile(df$mean_height, 0.25, na.rm = TRUE)
q3 <- quantile(df$mean_height, 0.75, na.rm = TRUE)
iqr <- q3 - q1
lower_bound <- q1 - 1.5 * iqr
upper_bound <- q3 + 1.5 * iqr

# Remove outliers in height
df <- df[df["mean_height"] > lower_bound & df["mean_height"] < upper_bound,]
```


```{r additional-cleaning}
## Recode variables in Religion, Ethnicity and Occupation
### Clean religion variable
df$religion[df$religion == "Christianity"] <-  "Christian" # Replace Christianity with Christian
df$religion[df$religion == "Islamic"] <- "Islam" # Replace Islamic with Islam
df$religion[df$religion == "Hindu"] <- "Others" # Replace Hindu with Others
df$religion[df$religion == "None"] <- "Others" # Replace none with others

### Clean education variable
df$education[df$education == ""] <- NA

### Clean ethnicity
df$ethnicity[df$ethnicity == "Akan(Fante)"] <- "Akan" # Add Akan(Fante) to Akan
df$ethnicity[df$ethnicity == "Ewe"] <- "Others" # Ewe
df$ethnicity[df$ethnicity =="Ga"] <- "Others" # Ga
df$ethnicity[df$ethnicity =="Guan"] <- "Others" # Guan
df$ethnicity[df$ethnicity =="Hausa"] <- "Others" # Huasa
df$ethnicity[df$ethnicity =="Nigerian"] <- "Others" # Nigerian

### Clean occupation
#### Define the mapping to broader categories
occupation_mapping <- c(
  Driver = "employed",
  Teaching = "employed",
  Trader = "employed",
  Farmer = "employed",
  Librarian = "employed",
  "Private cleaner" = "employed",
  Barbar = "employed",
  "retired Teacher" = "retired",
  "Not working" = "unemployed",
  Student = "student",
  Pensioner = "retired",
  "Retired teacher" = "retired",
  Fisherman = "employed",
  Musician = "employed",
  "Chopbar attendant" = "employed",
  Nurse = "employed",
  "Palm oil making" = "employed",
  "Hair dresser" = "employed",
  "Retired midwife" = "retired",
  "Bar attendant" = "employed",
  "Telephone receptionist" = "employed",
  "Self-employed" = "employed",
  "Account officer" = "employed",
  Tailor = "employed",
  "Self- employed" = "employed",
  Cook = "employed",
  Security = "employed",
  Matron = "employed",
  Teacher = "employed",
  "Fashion designer" = "employed",
  Artisan = "employed",
  "Cold store" = "employed",
  "Biomedical scientist" = "employed",
  NSP = "employed",
  "Retired Nurse" = "retired",
  "Immigration officer" = "employed",
  Unemployed = "unemployed",
  Hairdresser = "employed",
  Cleaner = "employed",
  "Fire service officer" = "employed",
  "Medical Doctor" = "employed",
  Mechanic = "employed",
  None = "unemployed" 
)

# Recode the variable in your dataframe 
df$occupational_status <- occupation_mapping[df$occupation]
```


## Exploratory data analysis

```{r glimpse-data}
# Glimpse dataset
df |>
  glimpse()
```

```{r normality-test}
# Function to perform Shapiro-Wilk test and extract p-value
shapiro_test <- function(x) {
  shapiro_result <- shapiro.test(x)
  return(shapiro_result$p.value)
}

# Extract numeric variables from the dataset
numeric_vars <- df %>%
  select_if(is.numeric)

# Apply the Shapiro-Wilk test to each numeric variable and tidy the results
shapiro_p_values <- numeric_vars %>%
  summarise(across(everything(), ~ shapiro_test(.))) %>%
  pivot_longer(everything(), names_to = "Variable", values_to = "P_Value")

# Display the p-values
print(shapiro_p_values)
```


```{r skim-dataset}
skim(df)
```


```{r visualise-height}
# Histogram for height
df |>
  ggplot(aes(mean_height)) +
  geom_histogram()

# Boxplot for height
df |>
  ggplot(aes(y = mean_height)) +
  geom_boxplot() # There are outliers in the height data
```

```{r age-variable}
# Histogram for age
df |>
  ggplot(aes(age)) +
  geom_histogram()

# Boxplot for age
df |>
  ggplot(aes(y = age)) +
  geom_boxplot() # There are outliers in the height data
```

```{r visualise-ulna}
# Histogram for ulna length
df |>
  ggplot(aes(mean_ulna)) +
  geom_histogram()

# Boxplot for ulna length
df |>
  ggplot(aes(y = mean_ulna)) +
  geom_boxplot() # There are outliers in the height data
```

```{r relationship-numeric-variables}
#| message: false
# Scatterplot matrix
numeric_vars |>
  select(age, mean_height, mean_ulna) |>
  ggpairs()
```

```{r}
# Relationship between ulna length and height by gender
df |>
  ggplot(aes(mean_ulna, mean_height, color = gender)) +
  geom_point()

# Relationship between age and height by gender
df |>
  ggplot(aes(age, mean_height, color = gender)) +
  geom_point()
```


```{r categorical-data}
# Bar chart for gender
df |>
  ggplot(aes(gender)) +
  geom_bar()

# Bar chart for education
df |>
  ggplot(aes(education)) +
  geom_bar()

# Bar chart for marital status
df |>
  ggplot(aes(marital_status)) +
  geom_bar()

# Bar chart for occupation (Cleaning note: Find unique values and recode categories)
df |>
  ggplot(aes(occupational_status)) +
  geom_bar()

# Bar chart for ethnicity (cleaning note: add Akan:Fante and Fante to Akan)
df |>
  ggplot(aes(ethnicity)) +
  geom_bar()

# Bar chart for religion (Cleaning note: merge christian and christianity, islam and islamic)
df |>
  ggplot(aes(religion)) +
  geom_bar()
```

```{r remove-occupation}
# Remove occupation 
df <- df |>
  select(-occupation)
```


## Descriptive statistics

### Predictions

```{r mutate-predicted-height-elia}
# Mutate predicted height using Elia equation

predicted_height_must <- case_when(
      # Predicted height for males
      df$gender == "male" ~ ifelse (df$age < 65, 
                   79.2 + (3.60 * df$mean_ulna),
                   86.3 + (3.15 * df$mean_ulna)),
      # Predicted height for females
      df$gender == "female" ~ ifelse (df$age < 65, 
                     95.6 + (2.77 * df$mean_ulna),
                     80.4 + (3.25 * df$mean_ulna)),
      TRUE ~ NA_real_
    )
```

```{r mutate-predicted-height-madden}
# Mutate predicted height using Madden equation
predicted_height_madden <- case_when(
      # Predicted height for males
      df$gender == "male" ~  
                   83.09 + (3.14 * df$mean_ulna),
      # Predicted height for females
      df$gender == "female" ~ 
                     76.84 + (3.14 * df$mean_ulna),
      TRUE ~ NA_real_
    )
```


```{r add-predicted-height-to-df}
# Add predicted height to dataset
df$predicted_height_must <- predicted_height_must
df$predicted_height_madden <- predicted_height_madden
```


```{r label-variables}
# Label variables
df <- df |>
  mutate(
    age = ff_label(age, "Age (years)"),
    gender = ff_label(gender, "Sex of participant"),
    education = ff_label(education, "Educational status"),
    marital_status = ff_label(marital_status, "Marital status"),
    occupational_status = ff_label(occupational_status, "Occupational status"),
    ethnicity = ff_label(ethnicity, "Ethnicity"),
    religion = ff_label(religion, "Religion"),
    mean_height = ff_label(mean_height, "Mean height (cm)"),
    mean_ulna = ff_label(mean_ulna, "Mean ulna length (cm)"),
    predicted_height_must = ff_label(predicted_height_must, "Predicted height Elia (cm)"),
    predicted_height_madden = ff_label(predicted_height_madden, "Predicted height Madden (cm)")
  )
```


### Scatterplot matrix


```{r scatterplot-predicted-height}
#| message: false
# Scatterplot matrix
df |>
  select(mean_height, predicted_height_madden, predicted_height_must) |>
  ggpairs()
```


### Summary statistics



```{r summary-statistics}
df |> 
  tbl_summary(
    type = all_dichotomous() ~ "categorical"
  )
```

```{r table-summary-gender}
df |> 
  tbl_summary(
    by = gender,
    type = all_dichotomous() ~ "categorical"
  ) |> add_p() |>
  bold_p()
```


### Bland-Altman analysis: Elia 


```{r bland-altman-analysis-must}
blandr.statistics (df$mean_height,df$predicted_height_must, sig.level=0.95 )
```


```{r bland-plot}
#| message: false
#| warning: false
blandr.draw(df$mean_height,df$predicted_height_must, plotTitle = "Difference between Predicted height (cm) (MUST) vs Actual height (cm)")
```


### Bland-Altman analysis: Madden


```{r bland-altman-analysis-madden}
blandr.statistics (df$mean_height, df$predicted_height_madden , sig.level=0.95 )
```


```{r plot-madden}
#| message: false
#| warning: false
blandr.draw(df$mean_height,df$predicted_height_madden, plotTitle = "Difference between Predicted height (cm) (Madden) vs Actual height (cm)")
```

```{r metrics-function}
# Function to evaluate model predictions
height_metrics <- function(actual_height, predicted_height){
  # Mean absolute error
  mae_eval <- mae(actual_height, predicted_height)
  
  # Mean squared error
  mse_eval <- mse(actual_height, predicted_height)
  
  # Root mean squared error
  rmse_eval <- rmse(actual_height, predicted_height)
  
  return(c(mae_eval, mse_eval, rmse_eval))
}
```


```{r data-for-ml, eval=FALSE}
height_ml <- df |>
  select(age, gender, mean_ulna, mean_height)

export(height_ml, here("data", "height_prediction.csv"))
```



```{r export-dataset}
# Export csv file
export(df, here("data", "height_agreement.csv"))

# Export spss file
export(df, here("data", "height_agreement.sav"))

# Export excel file
export(df, here("data", "height_agreement.xlsx"))

# Export RData
export(df, here("data", "height_data.rdata"))
```



